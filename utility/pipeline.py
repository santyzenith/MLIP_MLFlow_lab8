# This file is designed based on MlFlow tutorial
# https://mlflow.org/docs/latest/getting-started/intro-quickstart/index.html

import numpy as np
from sklearn import datasets
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier

def generate_model_name() -> str:
    """Generate a model name based on the current time

    Returns:
        str: model name
    """
    # Generate a random hex string as the model name
    #return hex(np.random.randint(0, 16**8))[2:]
    return hex(np.random.randint(0, 2**31 - 1))[2:]

def data_preprocessing() -> tuple[np.ndarray]:
    """Generate digits dataset's train and test dataset

    Returns:
        Tuple[np.ndarray]: X_train, X_test, y_train, y_test generated by sklearn
        train_test_split function.
    """
    # Load the digits dataset
    X, y = datasets.load_digits(
        return_X_y=True
    ) 

    # Split the data into training and test sets
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.7, random_state=42
    )

    return X_train, X_test, y_train, y_test


def train_logistic_regression(
    X_train: np.ndarray,
    y_train: np.ndarray,
    params: dict,
) -> LogisticRegression:
    """Function that generates a trained logistic regression model
        based on the training dataset and hyperparameters.

        Args:
            X_train (np.ndarray): Training dataset of shape (data point num, feature dim)
            X_test (np.ndarray): Test dataset of shape (data point num, 1)

        Returns:
            LogisticRegres# Start an MLflow run
    with mlflow.start_run():
        # Log the hyperparameters
        mlflow.log_params(params)

        # Log the loss metric
        mlflow.log_metric("accuracy", accuracy)

        # Set a tag that we can use to remind ourselves what this run was for
        mlflow.set_tag("Training Info", "Basic LR model for digits data")

        # Infer the model signature
        signature = infer_signature(X_train, lr.predict(X_train))

        # Log the model
        model_info = mlflow.sklearn.log_model(
            sk_model=lr,
            artifact_path="digits_model",
            signature=signature,
            input_example=X_train,
            registered_model_name="tracking-quickstart",
        )sion: Trained sklearn logistic regression model
    """
    # Train the model
    lr = LogisticRegression(**params)
    lr.fit(X_train, y_train)
    return lr


def train_random_forest(
    X_train: np.ndarray,
    y_train: np.ndarray,
    params: dict = {"n_estimators": 100, "random_state": 42},
) -> RandomForestClassifier:
    """Function that generates a trained random forest classifier model
    based on the training dataset and hyperparameters.

    Args:
        X_train (np.ndarray): Training dataset of shape (data point num, feature dim)
        y_train (np.ndarray): Training labels of shape (data point num, 1)
        params (dict): Parameters for the random forest classifier

    Returns:
        RandomForestClassifier: Trained sklearn random forest model
    """
    # Train the model
    rf = RandomForestClassifier(**params)
    rf.fit(X_train, y_train)
    return rf


def train_random_forest_regressor(
    X_train: np.ndarray,
    y_train: np.ndarray,
    params: dict = {"n_estimators": 100, "random_state": 42},
) -> RandomForestRegressor:
    """Function that generates a trained random forest regressor model
    based on the training dataset and hyperparameters.

    Args:
        X_train (np.ndarray): Training dataset of shape (data point num, feature dim)
        y_train (np.ndarray): Training labels of shape (data point num, 1)
        params (dict): Parameters for the random forest regressor

    Returns:
        RandomForestRegressor: Trained sklearn random forest regressor model
    """
    # Train the model
    rf_reg = RandomForestRegressor(**params)
    rf_reg.fit(X_train, y_train)
    return rf_reg


def train_decision_tree(
    X_train: np.ndarray,
    y_train: np.ndarray,
    params: dict = {"max_depth": 5, "random_state": 42},
) -> DecisionTreeClassifier:
    """Function that generates a trained decision tree classifier model
    based on the training dataset and hyperparameters.

    Args:
        X_train (np.ndarray): Training dataset of shape (data point num, feature dim)
        y_train (np.ndarray): Training labels of shape (data point num, 1)
        params (dict): Parameters for the decision tree classifier

    Returns:
        DecisionTreeClassifier: Trained sklearn decision tree model
    """
    # Train the model
    dt = DecisionTreeClassifier(**params)
    dt.fit(X_train, y_train)
    return dt


def evaluation(
    model: LogisticRegression | RandomForestClassifier,
    X_test: np.ndarray,
    y_test: np.ndarray,
) -> float:
    """evaluate the accuracy of the trained model

    Args:
        model (LogisticRegression): trained model object
        y_train (np.ndarray): test features
        y_test (np.ndarray): test labels

    Returns:
        float: accuracy of the trained model
    """
    # Predict on the test set
    y_pred = model.predict(X_test)

    # Calculate metrics
    accuracy = accuracy_score(y_test, y_pred)

    return accuracy
